#Task1 Task 1
#Create a class method named `validate`, which should be called from the `__init__` method to validate parameter email, passed to the constructor. The logic inside the `validate` method could be to check if the passed email parameter is a valid email string.

import re #regular expressions module

class Email:
    def __init__(self, email):
        self.email = email
        self.validate(email)

    @classmethod
    def validate(cls, email):
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            raise ValueError("Invalid email address")

        prefix, domain = email.split("@")
        if not re.match(r"^[a-zA-Z0-9._-]+$", prefix):
            raise ValueError("Invalid email prefix")

        if not re.match(r"^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$", domain):
            raise ValueError("Invalid email domain")

rand_email = Email("winter.me@ukr.net")  #створили екземпляр класу Email якщо все ок буде створено object
#якщо формат не пройшов перевiрку то викине ValueError
print(rand_email) #<__main__.Email object at 0x103b04160> object створено а значить email пройшов перевiрку успiшно
weird_email = Email('notanemail')
print(weird_email) #   raise ValueError("Invalid email address")
#ValueError: Invalid email address

email_str = 'this.email@ukr.net'
email_1 = 'thiswewe'
print(Email.validate(email_str)) #None
print(Email.validate(email_1)) # raise ValueError("Invalid email address")
#ValueError: Invalid email address



#Task2
#Implement 2 classes, the first one is the Boss and the second one is the Worker.
#Worker has a property 'boss', and its value must be an instance of Boss.
#You can reassign this value, but you should check whether the new value is Boss. Each Boss has a list of his own workers. You should implement a method that allows you to add workers to a Boss. You're not allowed to add instances of Boss class to workers list directly via access to attribute, use getters and setters instead!

class Boss:
    def __init__(self, id_: int, name: str, company: str):
        self.id = id_
        self.name = name
        self.company = company
        self._workers = [] #у кожного Босса свiй список спiвробiтникiв

    def add_worker(self, worker):
        if isinstance(worker, Worker):
            self._workers.append(worker)
        else:
            raise ValueError("Worker must be an instance of the Worker class")

    @property
    def workers(self):
        return self._workers


class Worker:
    def __init__(self, id_: int, name: str, company: str, boss: Boss):
        self.id = id_
        self.name = name
        self.company = company
        self._boss = None #приватний атрибут
        self.boss = boss

    @property
    def boss(self): #getter босс приватного босс атрибута _boss
        return self._boss

    @boss.setter
    def boss(self, new_boss):
        if isinstance(new_boss, Boss): #перевiрка на належнicть до класу Boss
            if self._boss is not None:
                self._boss.workers.remove(self)
            self._boss = new_boss
            new_boss.add_worker(self) #+спiвробiтника до списку спiвробiтникiв нового Boss
        else:
            raise ValueError("Boss must be an instance of the Boss class")

#Task 3
#Write a class TypeDecorators which has several methods for converting results of functions to a specified type (if it's possible)

from functools import wraps


class TypeDecorators:
    @staticmethod
    def to_int(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            try:
                return int(result)
            except (ValueError, TypeError):
                return result

        return wrapper

    @staticmethod
    def to_str(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            return str(result)

        return wrapper

    @staticmethod
    def to_bool(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            return bool(result)

        return wrapper

    @staticmethod
    def to_float(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            try:
                return float(result)
            except (ValueError, TypeError):
                return result

        return wrapper

@TypeDecorators.to_int
def do_nothing(string: str):
    return string

@TypeDecorators.to_bool
def do_something(string: str):
    return string

assert do_nothing('25') == 25
assert do_something('True') is True
